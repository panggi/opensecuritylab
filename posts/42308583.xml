<item>
	<title>XSS Prevention Rules</title>
	<link>http://www.opensecuritylab.org/xss-prevention-rules</link>
	<pubDate>Mon Feb 07 12:39:00 -0800 2011</pubDate>
	
	<dc:creator><![CDATA[Panggi Libersa Jasri Akadol]]></dc:creator>
	
	
		<category domain="tag" nicename="OWASP"><![CDATA[OWASP]]></category>
	
		<category domain="tag" nicename="Security"><![CDATA[Security]]></category>
	
		<category domain="tag" nicename="Web+Development"><![CDATA[Web Development]]></category>
	
		<category domain="tag" nicename="XSS"><![CDATA[XSS]]></category>
	

	<category><![CDATA[Uncategorized]]></category>

	<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

  <guid isPermaLink="false">http://www.opensecuritylab.org/xss-prevention-rules</guid>
	<description></description>
	<content:encoded><![CDATA[
<p><div class='p_embed p_image_embed'>
<a href="http://getfile8.posterous.com/getfile/files.posterous.com/temp-2011-02-07/BeyuudcyrzxlIvEqJrvtdzlznzitHklrgdhiGoaesrnEvbftzbmlieejjfjk/foiling_cross_site_attacks_2.png"><img alt="Foiling_cross_site_attacks_2" src="http://getfile8.posterous.com/getfile/files.posterous.com/temp-2011-02-07/BeyuudcyrzxlIvEqJrvtdzlznzitHklrgdhiGoaesrnEvbftzbmlieejjfjk/foiling_cross_site_attacks_2.png" /></a>
</div>
The following rules are intended to prevent all XSS in your  application. While these rules do not allow absolute freedom in putting  untrusted data into an HTML document, they should cover the vast  majority of common use cases. You do not have to allow <strong>all</strong> the rules in your organization. Many organizations may find that <strong>allowing only Rule #1 and Rule #2 are sufficient for their needs</strong>.  Please add a note to the discussion page if there is an additional  context that is often required and can be secured with escaping.</p>
<p>Do NOT simply escape the list of example characters provided in  the various rules. It is NOT sufficient to escape only that list.  Blacklist approaches are quite fragile.  The whitelist rules here have  been carefully designed to provide protection even against future  vulnerabilities introduced by browser changes.</p>
<h2><span class="mw-headline"><!--more--> RULE #0 - Never Insert Untrusted Data Except in Allowed Locations </span></h2>
<p>The first rule is to <strong>deny all</strong> - don't put untrusted data into  your HTML document unless it is within one of the slots defined in Rule  #1 through Rule #5. The reason for Rule #0 is that there are so many  strange contexts within HTML that the list of escaping rules gets very  complicated. We can't think of any good reason to put untrusted data in  these contexts.</p>
<script src="https://gist.github.com/815148.js?file=xss-rule-0.html"></script>
<p>Most importantly, never accept actual JavaScript code from an  untrusted source and then run it. For example, a parameter named  "callback" that contains a JavaScript code snippet.  No amount of  escaping can fix that.</p>
<h2><span class="mw-headline"> RULE #1 - HTML Escape Before Inserting Untrusted Data into HTML Element Content </span></h2>
<p>Rule #1 is for when you want to put untrusted data directly into the  HTML body somewhere. This includes inside normal tags like div, p, b,  td, etc. Most web frameworks have a method for HTML escaping for the  characters detailed below. However, this is <strong>absolutely not sufficient for other HTML contexts.</strong> You need to implement the other rules detailed here as well.</p>
<script src="https://gist.github.com/815152.js?file=xss-rule-1.html"></script>
<p>Escape the following characters with HTML entity encoding to prevent  switching into any execution context, such as script, style, or event  handlers. Using hex entities is recommended in the spec. In addition to  the 5 characters significant in XML (&amp;, &lt;, &gt;, ", '), the  forward slash is included as it helps to end an HTML entity.</p>
<script src="https://gist.github.com/815161.js?file=html-entity"></script>
<p>See the <a href="http://code.google.com/p/owasp-esapi-java/source/browse/trunk/src/main/java/org/owasp/esapi/codecs/HTMLEntityCodec.java" class="external text" rel="nofollow">ESAPI reference implementation</a> of HTML entity escaping and unescaping.</p>
<script src="https://gist.github.com/815163.js?file=esapi"></script>
<p>&nbsp;</p>
<h2><span class="mw-headline"> RULE #2 - Attribute Escape Before Inserting Untrusted Data into HTML Common Attributes </span></h2>
<p>Rule #2 is for putting untrusted data into typical attribute values  like width, name, value, etc. This should not be used for complex  attributes like href, src, style, or any of the event handlers like  onmouseover.  It is extremely important that event handler attributes  should follow Rule #3 for HTML JavaScript Data Values.</p>
<script src="https://gist.github.com/815167.js?file=xss-rule-2.html"></script>
<p>Except for alphanumeric characters, escape all characters with ASCII  values less than 256 with the &amp;#xHH; format (or a named entity if  available) to prevent switching out of the attribute. The reason this  rule is so broad is that developers frequently leave attributes  unquoted.  Properly quoted attributes can only be escaped with the  corresponding quote. Unquoted attributes can be broken out of with many  characters, including [space]&nbsp;% * + , - /&nbsp;; &lt; = &gt; ^ and |.</p>
<p>See the <a href="http://code.google.com/p/owasp-esapi-java/source/browse/trunk/src/main/java/org/owasp/esapi/codecs/HTMLEntityCodec.java" class="external text" rel="nofollow">ESAPI reference implementation</a> of HTML entity escaping and unescaping.</p>
<script src="https://gist.github.com/815173.js?file=esapi2"></script>
<p>&nbsp;</p>
<p><iframe scrolling="no" src="http://malcoder.info/ads.content.html" frameborder="0" height="30" width="480"> </iframe></p>
<h2><span class="mw-headline"> RULE #3 - JavaScript Escape Before Inserting Untrusted Data into HTML JavaScript Data Values </span></h2>
<p>Rule #3 concerns the JavaScript event handlers that are specified on  various HTML elements. The only safe place to put untrusted data into  these event handlers as a quoted "data value."  Including untrusted data  inside any other code block is quite dangerous, as it is very easy to  switch into an execution context, so use with caution.</p>
<script src="https://gist.github.com/815178.js?file=xss-rule-3.html"></script>
<p>Please note there are some JavaScript functions that can never safely use untrusted data as input - <strong>EVEN IF JAVASCRIPT ESCAPED</strong>!</p>
<p>For example:</p>
<script src="https://gist.github.com/815184.js?file=xss-rule-3.1.html"></script>
<p>Except for alphanumeric characters, escape all characters less than  256 with the \xHH format to prevent switching out of the data value into  the script context or into another attribute. Do not use any escaping  shortcuts like \" because the quote character may be matched by the HTML  attribute parser which runs first.  If an event handler is quoted,  breaking out requires the corresponding quote. The reason this rule is  so broad is that developers frequently leave event handler attributes  unquoted.  Properly quoted attributes can only be escaped with the  corresponding quote. Unquoted attributes can be broken out of with many  characters including [space]&nbsp;% * + , - /&nbsp;; &lt; = &gt; ^ and |. Also, a  &lt;/script&gt; closing tag will close a script block even though it is  inside a quoted string because the HTML parser runs before the  JavaScript parser.</p>
<p>See the <a href="http://code.google.com/p/owasp-esapi-java/source/browse/trunk/src/main/java/org/owasp/esapi/codecs/JavaScriptCodec.java" class="external text" rel="nofollow">ESAPI reference implementation</a> of JavaScript escaping and unescaping.</p>
<script src="https://gist.github.com/815191.js?file=esapi3"></script>
<h2><span class="mw-headline"> RULE #4 - CSS Escape Before Inserting Untrusted Data into HTML Style Property Values </span></h2>
<p>Rule #4 is for when you want to put untrusted data into a stylesheet  or a style tag. CSS is surprisingly powerful, and can be used for  numerous attacks. Therefore, it's important that you only use untrusted  data in a property <strong>value</strong> and not into other places in style data.  You should stay away from putting untrusted data into complex  properties like url, behavior, and custom (-moz-binding). You should  also not put untrusted data into IE&rsquo;s expression property value which  allows JavaScript.</p>
<script src="https://gist.github.com/815193.js?file=xss-rule-4.html"></script>
<p>Except for alphanumeric characters, escape all characters with ASCII  values less than 256 with the \HH escaping format. Do not use any  escaping shortcuts like \" because the quote character may be matched by  the HTML attribute parser which runs first. Prevent switching out of  the property value and into another property or attribute. Also prevent  switching into an expression or other property value that allows  scripting. If attribute is quoted, breaking out requires the  corresponding quote.  All attributes should be quoted but your encoding  should be strong enough to prevent XSS when untrusted data is placed in  unquoted contexts. Unquoted attributes can be broken out of with many  characters including [space]&nbsp;% * + , - /&nbsp;; &lt; = &gt; ^ and |.  Also,  the &lt;/style&gt; tag will close the style block even though it is  inside a quoted string because the HTML parser runs before the  JavaScript parser. Please note that we recommend aggressive CSS encoding  to prevent XSS attacks for both quoted and unquoted attributes.</p>
<p>See the <a href="http://code.google.com/p/owasp-esapi-java/source/browse/trunk/src/main/java/org/owasp/esapi/codecs/CSSCodec.java" class="external text" rel="nofollow">ESAPI reference implementation</a> of CSS escaping and unescaping.</p>
<script src="https://gist.github.com/815197.js?file=esapi4"></script>
<h2><span class="mw-headline"> RULE #5 - URL Escape Before Inserting Untrusted Data into HTML URL Parameter Values </span></h2>
<p>Rule #5 is for when you want to put untrusted data into HTTP GET parameter value.</p>
<script src="https://gist.github.com/815201.js?file=xss-rule-5.html"></script>
<p>Except for alphanumeric characters, escape all characters with ASCII  values less than 256 with the&nbsp;%HH escaping format.  Including untrusted  data in data: URLs should not be allowed as there is no good way to  disable attacks with escaping to prevent switching out of the URL. All  attributes should be quoted. Unquoted attributes can be broken out of  with many characters including [space]&nbsp;% * + , - /&nbsp;; &lt; = &gt; ^ and  |. Note that entity encoding is useless in this context.</p>
<p>See the <a href="http://code.google.com/p/owasp-esapi-java/source/browse/trunk/src/main/java/org/owasp/esapi/codecs/PercentCodec.java" class="external text" rel="nofollow">ESAPI reference implementation</a> of URL escaping and unescaping.</p>
<script src="https://gist.github.com/815205.js?file=esapi5"></script>
<p>WARNING: Do not encode complete or relative URL's with URL encoding!  If untrusted input is meant to be placed into href, src or other  URL-based attributes, it should be validated to make sure it does not  point to an unexpected protocol, especially Javascript links. URL's  should then be encoded based on the context of display like any other  piece of data. For example, user driven URL's in HREF links should be  attribute encoded. For example:</p>
<p><a href="https://gist.github.com/815206.js?file=xss-rule-5">https://gist.github.com/815206.js?file=xss-rule-5</a></p>
<h2><span class="mw-headline"> RULE #6 - Use an HTML Policy engine to validate or clean user-driven HTML in an outbound way </span></h2>
<p><a href="https://gist.github.com/815212.js?file=xss-rule-6">https://gist.github.com/815212.js?file=xss-rule-6</a></p>
<h2><span class="mw-headline"> RULE #7 - Prevent DOM-based XSS </span></h2>
<p>For details on what DOM-based XSS is, and defenses against this type of XSS flaw, please see the OWASP article on <a href="http://www.owasp.org/index.php/DOM_Based_XSS" title="DOM Based XSS"> DOM-based XSS</a>.</p>
<h1><span class="mw-headline" style="font-size: large;">Related Articles</span></h1>
<p><strong>XSS Attack Cheat Sheet</strong></p>
<p>The following article describes how to exploit different kinds of  XSS Vulnerabilities that this article was created to help you avoid:</p>
<ul>
<li> RSnake: "XSS Cheat Sheet" - <a href="http://ha.ckers.org/xss.html" class="external free" rel="nofollow">http://ha.ckers.org/xss.html</a> </li>
</ul>
<p><strong>Description of XSS Vulnerabilities</strong></p>
<ul>
<li> OWASP article on <a href="http://www.owasp.org/index.php/XSS" class="mw-redirect" title="XSS">XSS</a> Vulnerabilities </li>
</ul>
<p><strong>How to Review Code for Cross-site scripting Vulnerabilities</strong></p>
<ul>
<li> <a href="http://www.owasp.org/index.php/Category:OWASP_Code_Review_Project" title="Category:OWASP Code Review Project">OWASP Code Review Guide</a> article on <a href="http://www.owasp.org/index.php/Reviewing_Code_for_Cross-site_scripting" title="Reviewing Code for Cross-site scripting">Reviewing Code for Cross-site scripting</a> Vulnerabilities </li>
</ul>
<p><strong>How to Test for Cross-site scripting  Vulnerabilities</strong></p>
<ul>
<li> <a href="http://www.owasp.org/index.php/Category:OWASP_Testing_Project" class="mw-redirect" title="Category:OWASP Testing Project">OWASP Testing Guide</a> article on <a href="http://www.owasp.org/index.php/Testing_for_Cross_site_scripting" title="Testing for Cross site scripting">Testing for Cross site scripting</a> Vulnerabilities </li>
</ul>
<p><strong>Other Articles in the OWASP Prevention Cheat Sheet Series</strong></p>
<ul>
<li> <a href="http://www.owasp.org/index.php/Authentication_Cheat_Sheet" title="Authentication Cheat Sheet">Authentication Cheat Sheet</a> </li>
<li> <a href="http://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet" title="Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet">Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet</a> </li>
<li> <a href="http://www.owasp.org/index.php/Cryptographic_Storage_Cheat_Sheet" title="Cryptographic Storage Cheat Sheet">Cryptographic Storage Cheat Sheet</a> </li>
<li> <a href="http://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet" title="SQL Injection Prevention Cheat Sheet">SQL Injection Prevention Cheat Sheet</a> </li>
<li> <a href="http://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet" title="Transport Layer Protection Cheat Sheet">Transport Layer Protection Cheat Sheet</a> </li>
<li> <strong class="selflink">XSS (Cross Site Scripting) Prevention Cheat Sheet</strong> </li>
</ul>
<h1><span class="mw-headline" style="font-size: large;"> Authors and Primary Editors </span></h1>
<p>Jeff Williams - jeff.williams[at]aspectsecurity.com</p>
<p>Jim Manico - jim[at]manico.net</p>
<p>via <a href="http://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet" target="_blank">OWASP</a></p>]]></content:encoded>
	<excerpt:encoded><![CDATA[The following rules are intended to prevent all XSS in your application. While these rules do not allow absolute freedom in putting untrusted data into an HTML document, they should cover the vast majority of common use cases. You do not have to a...]]></excerpt:encoded>	

	<wp:post_date>Mon Feb 07 12:39:00 -0800 2011</wp:post_date>
	<wp:post_date_gmt>Mon Feb 07 12:39:00 -0800 2011</wp:post_date_gmt>
	<wp:comment_status>open</wp:comment_status>
	<wp:ping_status>open</wp:ping_status>
	<wp:post_id>42308583</wp:post_id>
	<wp:post_name>xss-prevention-rules</wp:post_name>
	<wp:status>publish</wp:status>
	<wp:post_parent>0</wp:post_parent>
	<wp:menu_order>0</wp:menu_order>
	<wp:post_type>post</wp:post_type>
	<wp:post_password></wp:post_password>
	<wp:is_sticky>0</wp:is_sticky>

	
		<wp:comment>
			<wp:comment_id>7099511</wp:comment_id>
			
				<wp:comment_author><![CDATA[Charlie B]]></wp:comment_author>
				<wp:comment_author_url><![CDATA[https://www.golemtechnologies.com]]></wp:comment_author_url>
			
			<wp:comment_date>Mon Feb 14 14:20:12 -0800 2011</wp:comment_date>
			<wp:comment_date_gmt>Mon Feb 14 14:20:12 -0800 2011</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Very good comprehensive article on where XSS commonly occurs. It's very hard to blacklist every XSS vulnerability - there is potential user input in so many places (like the referrer attribute) which might be unexpected. 

I wrote a similar article for XSS and some of the places it enters an application - https://www.golemtechnologies.com/articles/prevent-xss

In any case, thanks for the technical details, I think I will add this as an additional resource on my page.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
		</wp:comment>
	
</item>
